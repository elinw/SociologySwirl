- Class: meta
  Course: SociologySwirl
  Lesson: The Mean
  Author: Elin Waring
  Type: Standard
  Organization: Soc 345
  Version: 2.4.2

- Class: text
  Output: In this lesson we are going to us R to deepen understanding of the
  mean.  For this lesson we will use the chickwts data set to explore the mean.


- Class: cmd_question
  Output: The data set we are using is about chickens and how much they weigh and how that relates to the kind of feed they got. Learn more about the data set by typing ?chickwts
  CorrectAnswer: ?chickwts
  AnswerTests: omnitest(correctExpr='?chickwts')
  Hint: Type ?chickwts

- Class: mult_question
  Output: What are the variables in the chickwts data set?
  AnswerChoices: weight and feed; weight and height; feed and height; color and weight
  CorrectAnswer: weight and feed
  AnswerTests: omnitest(correctVal= 'weight and feed')
  Hint: Read the help file to find the answer

- Class: mult_question
  Output: What kind of variable is feed?
  AnswerChoices: factor; numeric; logical
  CorrectAnswer: factor
  AnswerTests: omnitest(correctVal= 'factor')
  Hint: Read the Format section of the help screen.

- Class: text
  Output: "Although in sociology we don't usually study chickens, you can
  think of this as like an obesity study where feed is something about the
  kind of food available in a neighborhood."

- Class: text
  Output: As you work on this make sure not to confuse this data set with the
  other chicken data set called chickWeight.

- Class: cmd_question
  Output: The mean is a statistic you are already familiar with and R has a
  simple to use function mean() that will calculate it for you. Use R to get
  the mean() of chickwts$weight. We know that all the data are present so we do not need to include na.rm.
  CorrectAnswer: mean(chickwts$weight)
  AnswerTests: omnitest(correctExpr='mean(chickwts$weight)')
  Hint: Check your spelling


- Class: cmd_question
  Output: Now use mean() on the feed variable
  CorrectAnswer: mean(chickwts$feed)
  AnswerTests: omnitest(correctExpr='mean(chickwts$feed)')
  Hint: Make sure to use the dataset$variable format.

- Class: mult_question
  Output: Why did asking for the mean of the feed variable generate a warning?
  AnswerChoices: Because feed is a nominal variable; Because feed is an interval variable; Because feed is numerical
  CorrectAnswer: Because feed is a nominal variable
  AnswerTests: omnitest(correctVal= 'Because feed is a nominal variable')
  Hint: Check the help screen for chikwts for information on feed.


- Class: text
  Output: Now we want to look more deeply into what the mean really is and why
  it is so important to statistians.

- Class: cmd_question
  Output: The mean is calculated by adding up all of the values of a variable
  and dividing by the sample size. In this case sum() for the weight variable
  can be used to add the values up and nrow(chickwts) can count the number of
  observations. Do this calculation.
  CorrectAnswer: sum(chickwts$weight)/nrow(chickwts)
  AnswerTests: omnitest(correctExpr='sum(chickwts$weight)/nrow(chickwts)')
  Hint: Make sure you use sum(chickwts$weight) and nrow(chickwts)

- Class: cmd_question
  Output: "Lets create a new variable in the chickwts data called mean_weight
  and set it equal to the mean of chickwts using the assignment operator (<-).
  Use the mean() function."
  CorrectAnswer: chickwts$mean_weight <- mean(chickwts$weight)
  AnswerTests: omnitest(correctExpr='chickwts$mean_weight <- mean(chickwts$weight)')
  Hint: THe new variable is created as chickwts$mean_weight. Use the mean() function to calculate it.

- Class: cmd_question
  Output: Get the summary() of the chickwts data set.
  CorrectAnswer: summary(chickwts)
  AnswerTests: omnitest(correctExpr='summary(chickwts)',)
  Hint: Put the name of the data set inside the parentheses of summary().

- Class: mult_question
  Output: Compare the summary results for weight and mean_weight. Which statement is true?
  AnswerChoices: The means of weight and mean_weight are the same.; The medians of weight and mean_weight are the same.;The third quartiles of weight and mean_weight are the same.
  CorrectAnswer: The means of weight and mean_weight are the same.
  AnswerTests: omnitest(correctVal= 'The means of weight and mean_weight are the same.')
  Hint: Compare the results in the pervious answer.

- Class: mult_question
  Output: What do you notice about the values in the mean_weight summary?
  AnswerChoices: They are all the same.; They are all different.; They are all equal to the values for the summary of weight.
  CorrectAnswer: They are all the same.
  AnswerTests: omnitest(correctVal= 'They are all the same.')
  Hint: Look carefully at the summary() results.


- Class: text
  Output: The values of mean_weight are all the same because when we created
  the variable we set it equal to the mean of weight, which is 261.3 (rounded),
  meaning all of the values are the same.

- Class: cmd_question
  Output: "What is the sum of mean_weight? Use the sum() function."
  CorrectAnswer: sum(chickwts$mean_weight)
  AnswerTests: omnitest(correctExpr='sum(chickwts$mean_weight)')
  Hint: Put the chickwts$mean_weight inside the parentheses.

- Class: cmd_question
  Output: What is the sum of weight?
  CorrectAnswer: sum(chickwts$weight)
  AnswerTests: omnitest(correctExpr='sum(chickwts$weight)')
  Hint: Put the chickwts$weight inside the parentheses.

- Class: mult_question
  Output: "What is true about the two sums?"
  AnswerChoices: They are equal;They are close in value; They are totally different
  CorrectAnswer: 'They are equal'
  AnswerTests: omnitest(correctVal= 'They are equal')
  Hint: Compare the values for the two previous answers.

- Class: mult_question
  Output: Remember that the mean is the sum of the values divided by the number of observations or mean = sum/n.  Based on that, why are the mean of weight and the mean of mean_weight equal?
  AnswerChoices: Because the sums are equal and the number of observations are equal; Because the sums are equal and the number of observations are different;Just a coincidence.
  CorrectAnswer: Because the sums are equal and the number of observations are equal
  AnswerTests: omnitest(correctVal= 'Because the sums are equal and the number of observations are equal')
  Hint: Compare the sums and think about how the chickwts data is set up. View the data if it helps you to understand.

- Class: mult_question
  Output: "If mean = sum/n, what else is true?"
  AnswerChoices: n*mean = sum;mean = sum*n;sum/mean = n
  CorrectAnswer: 'n*mean = sum'
  AnswerTests: omnitest(correctVal= 'n*mean = sum')
  Hint: Multiply both sides of the equation by n.

- Class: text
  Output: The previous answer is a good shortcut to remember. To get the sum, you can always multiply the mean by the number of observations.

- Class: text
  Output: "This is something we use all the time. For example if we say the mean number of apple slices a child will eat is 3.2 and we have 20 children, we can estimate that we need 3.2*20 apple slices, that is 64 slices total."

- Class: text
  Output: When we set all of the values of a new variable equal to the mean of another variable we are taking the same total amount (the sum) and spreading it evenly across all the observations.

- Class: mult_question
  Output: Why is the mean sometimes called the fair share value?
  AnswerChoices: Because it is the value each observation would have if the total amount (the sum) was redistributed evenly to all the observations.; Because it is what you get if the values are all the identical but the sum stays the same.; Both statements are true.
  CorrectAnswer: 'Both statements are true.'
  AnswerTests: omnitest(correctVal= 'Both statements are true.')
  Hint: Look back over the previous questions and answers to understand this.

- Class: text
  Output: If you are not sure you understood the fair share value, scroll back through what has been done so far in this lesson.

- Class: text
  Output: Now we are going to look at a second reason the mean is an important and useful statistic.

- Class: cmd_question
  Output: Create a new variable called weight_deviation in chickwts by
  subtracting the mean_weight from the weight.
  CorrectAnswer: chickwts$weight_deviation<-chickwts$weight - chickwts$mean_weight
  AnswerTests: omnitest(correctExpr='chickwts$weight_deviation<-chickwts$weight - chickwts$mean_weight')
  Hint: The code should be like chickwts$weight_deviation<-chickwts$weight - chickwts$mean_weight

- Class: cmd_question
  Output: Look at the last 10 rows of chickwts by typing tail(chickwts)
  CorrectAnswer: tail(chickwts)
  AnswerTests: omnitest(correctExpr='tail(chickwts)')
  Hint: Just type tail(chickwts)

- Class: mult_question
  Output: Which values of weight_deviation are negative?
  AnswerChoices: Those where weight is less than mean_weight; Those where weight is more than mean_weight; It is random.
  CorrectAnswer: Those where weight is less than mean_weight
  AnswerTests: omnitest(correctVal= 'Those where weight is less than mean_weight')
  Hint: Compare the weight, mean_weight and weight_deviation values for a few rows.

- Class: cmd_question
  Output: Get the summary of chickwts
  CorrectAnswer: summary(chickwts)
  AnswerTests: omnitest(correctExpr='summary(chickwts)')
  Hint: Use summary()

- Class: mult_question
  Output: What is the mean of weight_deviation?
  AnswerChoices: 0; 261.3;-3.31
  CorrectAnswer: 0
  AnswerTests: omnitest(correctVal= '0')
  Hint: Look at the summary results.

- Class: mult_question
  Output: Looking at the summary for weight_deviation, why is minimum negative and the maximum positive?
  AnswerChoices: Because the minimum is below the mean and the maximum is above the mean;Because the minimum is above the mean and the maximum is below the mean;Because the minimum is above the mean and the maximum is above the mean
  CorrectAnswer: Because the minimum is below the mean and the maximum is above the mean
  AnswerTests: omnitest(correctVal= 'Because the minimum is below the mean and the maximum is above the mean')
  Hint: Look at the values in the weight column and compare to the mean.

- Class: cmd_question
  Output: "Are the IQRs for weight and weigh_deviation the same or different? Type IQR(chickwts$weight) == IQR(chickwts$weight_deviation) to find out."
  CorrectAnswer: IQR(chickwts$weight) == IQR(chickwts$weight_deviation)
  AnswerTests: omnitest(correctExpr='IQR(chickwts$weight) == IQR(chickwts$weight_deviation)')
  Hint: Type IQR(chickwts$weight) == IQR(chickwts$weight_deviation)



- Class: mult_question
  Output: Why are the IQR values for weight and weight_deviation the same?
  AnswerChoices: Both statements are true.;Because subtracting the mean from each value does not change how far apart and two values are from each other.; Because all we did was shift everything down by 261.3
  CorrectAnswer: Both statements are true.
  AnswerTests: omnitest(correctVal= 'Both statements are true.')
  Hint: Read each statement carefully and think about what we did.

- Class: mult_question
  Output: Earlier we learned that sum = n*mean.  Based on that, without doing any calculations, what will the sum of weight_deviation be?
  AnswerChoices: 0;261.3;18533
  CorrectAnswer: 0
  AnswerTests: omnitest(correctVal= '0')
  Hint: Think about what you know about the mean.

- Class: cmd_question
  Output: Now use sum() to get the sum of weight_deviation.
  CorrectAnswer: sum(chickwts$weight_deviation)
  AnswerTests: omnitest(correctExpr='sum(chickwts$weight_deviation)')
  Hint: Don't forget chickwts$  and to check your spelling.

- Class: text
  Output: You may wonder why R does not give you 0 here. -1.421085e-12 is the
  same as -.000000000001421085 which is very, very close to 0. The problem is
  that both the mean_weight and weight_deviation were rounded and now the rounding is showing up in this
  calculation.

- Class: cmd_question
  Output: Now use round(sum(), 11) to get the sum of weight_deviation rounded
  to 11 digits.
  CorrectAnswer: sum(chickwts$weight_deviation)
  AnswerTests: omnitest(correctExpr='sum(chickwts$weight_deviation)')
  Hint: Don't forget chickwts$  and to check your spelling.


- Class: text
  Output: One way the mean is special is that the sum of the deviations from it will always be 0.


- Class: cmd_question
  Output: Now get the sum of all of the weight_deviations above 0 by using chickwts$weight_deviation[chickwts$weight_deviation > 0] as the variable.
  CorrectAnswer: sum(chickwts$weight_deviation[chickwts$weight_deviation > 0])
  AnswerTests: omnitest(correctExpr='sum(chickwts$weight_deviation[chickwts$weight_deviation > 0])')
  Hint: Put the code inside the sum function.

- Class: cmd_question
  Output: Now get the sum of all of the weight_deviations below 0 by using chickwts$weight_deviation[chickwts$weight_deviation < 0] as the variable.
  CorrectAnswer: sum(chickwts$weight_deviation[chickwts$weight_deviation < 0])
  AnswerTests: omnitest(correctExpr='sum(chickwts$weight_deviation[chickwts$weight_deviation < 0])')
  Hint: Put the code inside the sum function.

- Class: mult_question
  Output: What is interesting about the last two answers.
  AnswerChoices: They are the same except for the signs; They are the same; They are 0.
  CorrectAnswer: They are the same except for the signs
  AnswerTests: omnitest(correctVal= 'They are the same except for the signs')
  Hint: Look at the previous two answers and compare them.


- Class: text
  Output: One of the most important things about the mean is that it exactly balances the deviation data for the variable, with half of the total deviations above it and half below it.  This is different than the median where half of the observations are above the median and half below it.

- Class: text
  Output: This turns out to be a very important property for the rest of statistics as we will see.
